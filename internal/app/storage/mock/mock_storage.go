// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/storage/storage.go

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	context "context"
	model "ghostorange/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockStorage) AddData(ctx context.Context, dataType int, userID string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", ctx, dataType, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddData indicates an expected call of AddData.
func (mr *MockStorageMockRecorder) AddData(ctx, dataType, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockStorage)(nil).AddData), ctx, dataType, userID, data)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(ctx context.Context, username, hash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, username, hash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(ctx, username, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), ctx, username, hash)
}

// Count mocks base method.
func (m *MockStorage) Count(ctx context.Context, dataType int, user string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, dataType, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStorageMockRecorder) Count(ctx, dataType, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStorage)(nil).Count), ctx, dataType, user)
}

// GetCardInfo mocks base method.
func (m *MockStorage) GetCardInfo(ctx context.Context, id, userID string) (model.ItemCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardInfo", ctx, id, userID)
	ret0, _ := ret[0].(model.ItemCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardInfo indicates an expected call of GetCardInfo.
func (mr *MockStorageMockRecorder) GetCardInfo(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardInfo", reflect.TypeOf((*MockStorage)(nil).GetCardInfo), ctx, id, userID)
}

// GetData mocks base method.
func (m *MockStorage) GetData(ctx context.Context, dataType int) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", ctx, dataType)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockStorageMockRecorder) GetData(ctx, dataType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockStorage)(nil).GetData), ctx, dataType)
}

// GetPasswordHash mocks base method.
func (m *MockStorage) GetPasswordHash(cxt context.Context, userName string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordHash", cxt, userName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPasswordHash indicates an expected call of GetPasswordHash.
func (mr *MockStorageMockRecorder) GetPasswordHash(cxt, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordHash", reflect.TypeOf((*MockStorage)(nil).GetPasswordHash), cxt, userName)
}

// UserExists mocks base method.
func (m *MockStorage) UserExists(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockStorageMockRecorder) UserExists(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockStorage)(nil).UserExists), ctx, username)
}

// Mockconfig is a mock of config interface.
type Mockconfig struct {
	ctrl     *gomock.Controller
	recorder *MockconfigMockRecorder
}

// MockconfigMockRecorder is the mock recorder for Mockconfig.
type MockconfigMockRecorder struct {
	mock *Mockconfig
}

// NewMockconfig creates a new mock instance.
func NewMockconfig(ctrl *gomock.Controller) *Mockconfig {
	mock := &Mockconfig{ctrl: ctrl}
	mock.recorder = &MockconfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconfig) EXPECT() *MockconfigMockRecorder {
	return m.recorder
}

// DBDSN mocks base method.
func (m *Mockconfig) DBDSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBDSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// DBDSN indicates an expected call of DBDSN.
func (mr *MockconfigMockRecorder) DBDSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBDSN", reflect.TypeOf((*Mockconfig)(nil).DBDSN))
}
